<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\spi_oled.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\spi_oled.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Wed Apr 01 01:34:21 2015
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
thunk{v:0,-36} to Adafruit_SSD1351::fillScreen(unsigned short) &rArr; Adafruit_SSD1351::fillScreen(unsigned short) &rArr; Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SysTick_Handler</a><BR>
 <LI><a href="#[60]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[60]">ADC0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[61]">ADC1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[83]">ADC2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[3b]">BT0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[78]">BT10_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[79]">BT11_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[7a]">BT12_15_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[3c]">BT1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[3d]">BT2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[3e]">BT3_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[3f]">BT4_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[40]">BT5_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[41]">BT6_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[42]">BT7_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[76]">BT8_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[77]">BT9_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[64]">CAN0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[65]">CAN1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[14]">CSV_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[67]">DMAC0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[68]">DMAC1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[69]">DMAC2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[6a]">DMAC3_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[6b]">DMAC4_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[6c]">DMAC5_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[6d]">DMAC6_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[6e]">DMAC7_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[6f]">DSTC_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[43]">DT1_2_IRAHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[84]">Dummy</a> from startup_mb9bf56x.o(.text) referenced 4 times from startup_mb9bf56x.o(RESET)
 <LI><a href="#[66]">ETHER0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[1f]">EXINT0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[70]">EXINT16_17_18_19_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[20]">EXINT1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[71]">EXINT20_21_22_23_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[72]">EXINT24_25_26_27_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[73]">EXINT28_29_30_31_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[21]">EXINT2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[22]">EXINT3_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[23]">EXINT4_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[24]">EXINT5_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[25]">EXINT6_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[26]">EXINT7_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[45]">EXTBUS_ERR_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[49]">EXTINT10_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[4a]">EXTINT11_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[4b]">EXTINT12_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[4c]">EXTINT13_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[4d]">EXTINT14_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[4e]">EXTINT15_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[47]">EXTINT8_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[48]">EXTINT9_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[88]">FLASHIF_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[2c]">FRT0_PEAK_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[2d]">FRT0_ZERO_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[30]">FRT1_PEAK_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[31]">FRT1_ZERO_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[34]">FRT2_PEAK_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[35]">FRT2_ZERO_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[2e]">ICU0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[32]">ICU1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[36]">ICU2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[17]">IRQ003SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[18]">IRQ004SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[19]">IRQ005SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[1a]">IRQ006SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[1b]">IRQ007SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[1c]">IRQ008SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[1d]">IRQ009SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[1e]">IRQ010SEL_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[16]">LVD_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[50]">MFS0_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[51]">MFS0_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[7f]">MFS10_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[80]">MFS10_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[81]">MFS11_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[82]">MFS11_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[89]">MFS12_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[8a]">MFS12_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[8b]">MFS13_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[8c]">MFS13_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[8d]">MFS14_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[8e]">MFS14_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[8f]">MFS15_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[90]">MFS15_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[52]">MFS1_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[53]">MFS1_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[54]">MFS2_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[55]">MFS2_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[56]">MFS3_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[57]">MFS3_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[58]">MFS4_RX_IRQHandler</a> from interrupts.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[59]">MFS4_TX_IRQHandler</a> from interrupts.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[5a]">MFS5_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[5b]">MFS5_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[5c]">MFS6_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[5d]">MFS6_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[5e]">MFS7_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[5f]">MFS7_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[7b]">MFS8_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[7c]">MFS8_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[7d]">MFS9_RX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[7e]">MFS9_TX_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[2f]">OCU0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[33]">OCU1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[37]">OCU2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[38]">PPG00_02_04_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[39]">PPG08_10_12_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[3a]">PPG16_18_20_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[27]">QPRC0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[28]">QPRC1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[74]">QPRC2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[75]">QPRC3_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[46]">RTC_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[a5]">Reset_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[87]">SD_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[15]">SWDT_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[91]">SystemInit</a> from system_mb9abxxx.o(.text) referenced from startup_mb9bf56x.o(.text)
 <LI><a href="#[4f]">TIM_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[63]">USB0_HOST_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[62]">USB0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[86]">USB1_HOST_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[85]">USB1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[44]">WC_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[29]">WFG0_DTIF0_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[2a]">WFG1_DTIF1_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[2b]">WFG2_DTIF2_IRQHandler</a> from startup_mb9bf56x.o(.text) referenced from startup_mb9bf56x.o(RESET)
 <LI><a href="#[99]">Adafruit_GFX::fillScreen(unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[96]">Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[95]">Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9a]">Adafruit_GFX::invertDisplay(unsigned char)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9a]">Adafruit_GFX::invertDisplay(unsigned char)</a> from adafruit_gfx.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[9b]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9b]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[94]">Adafruit_GFX::drawLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[94]">Adafruit_GFX::drawLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[97]">Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[97]">Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[98]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[98]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[9f]">Adafruit_SSD1351::fillScreen(unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[9d]">Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[9e]">Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[9c]">Adafruit_SSD1351::drawPixel(short, short, unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[a0]">thunk{v:0,-12} to Adafruit_SSD1351::drawPixel(short, short, unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[a1]">thunk{v:0,-20} to Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[a2]">thunk{v:0,-24} to Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[a3]">thunk{v:0,-36} to Adafruit_SSD1351::fillScreen(unsigned short)</a> from adafruit_ssd1351.o(.text) referenced from adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
 <LI><a href="#[93]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[a6]">__main</a> from __main.o(!!!main) referenced from startup_mb9bf56x.o(.text)
 <LI><a href="#[a4]">__sti___8_main_cpp_tft</a> from main.o(.text) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a6]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ad]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[16f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[170]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[171]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[172]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[af]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[173]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[174]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[175]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[176]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[177]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[178]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[180]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[181]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[182]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[aa]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[189]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b2]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b4]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; WyzBeeSpi_Init &rArr; Mfs_Csio_Init &rArr; Mfs_Csio_SetBaudRate &rArr; Mfs_GetReloadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[169]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b7]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a5]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>BT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>BT10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>BT11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>BT12_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>BT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>BT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>BT8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>BT9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CSV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMAC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMAC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMAC6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMAC7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DSTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DT1_2_IRAHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>Dummy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ETHER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>EXINT16_17_18_19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>EXINT20_21_22_23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>EXINT24_25_26_27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>EXINT28_29_30_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTBUS_ERR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTINT10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTINT11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTINT12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTINT13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTINT14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTINT15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTINT8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTINT9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>FLASHIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FRT0_PEAK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FRT0_ZERO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FRT1_PEAK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FRT1_ZERO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FRT2_PEAK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FRT2_ZERO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ICU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ICU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ICU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ003SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ004SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ005SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ006SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ007SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ008SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ009SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ010SEL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>MFS0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>MFS0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>MFS10_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>MFS10_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>MFS11_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MFS11_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>MFS12_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>MFS12_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>MFS13_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>MFS13_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>MFS14_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>MFS14_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>MFS15_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>MFS15_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>MFS1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>MFS1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>MFS2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>MFS2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>MFS3_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>MFS3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>MFS5_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>MFS5_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>MFS6_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>MFS6_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>MFS7_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>MFS7_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MFS8_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MFS8_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>MFS9_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MFS9_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OCU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>OCU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OCU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PPG00_02_04_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PPG08_10_12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PPG16_18_20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>QPRC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>QPRC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>QPRC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>QPRC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USB0_HOST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>USB1_HOST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>WC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WFG0_DTIF0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WFG1_DTIF1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WFG2_DTIF2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mb9bf56x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, system_mb9abxxx.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>SystemInit</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_mb9abxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>Exint_IrqHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, exint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExintGetInternDataIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ057_Handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ054_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
</UL>

<P><STRONG><a name="[18e]"></a>ExintNMIrqHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exint.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>Exint_Init</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, exint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[c1]"></a>Exint_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, exint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[18f]"></a>Exint_EnableChannel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, exint.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>Exint_DisableChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, exint.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>Exint_Nmi_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[c4]"></a>Exint_Nmi_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[c5]"></a>Mfs_InitTxIrq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mfs_InitTxIrq &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[c9]"></a>Mfs_InitRxIrq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mfs_InitRxIrq &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[ca]"></a>Mfs_DeInitIrq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mfs_DeInitIrq &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_DeInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_DeInit
</UL>

<P><STRONG><a name="[13f]"></a>MfsIrqHandlerRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MfsIrqHandlerRx
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFS4_RX_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>MfsIrqHandlerTx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MfsIrqHandlerTx
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFS4_TX_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>MfsIrqHandlerStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MfsIrqHandlerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFS4_TX_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>Mfs_GetBusClock</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, mfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_GetReloadValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetReloadValue
</UL>

<P><STRONG><a name="[cc]"></a>Mfs_GetReloadValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mfs_GetReloadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetBusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetBaudRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_SetBaudRate
</UL>

<P><STRONG><a name="[ce]"></a>Mfs_Uart_SetBaudRate</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetReloadValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_Init
</UL>

<P><STRONG><a name="[d0]"></a>Mfs_Uart_Init</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_SetBaudRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[d1]"></a>Mfs_Uart_DeInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_DeInitIrq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_DeInit
</UL>

<P><STRONG><a name="[d2]"></a>Mfs_Csio_SetBaudRate</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mfs_Csio_SetBaudRate &rArr; Mfs_GetReloadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetReloadValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_SetBaudRate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_Init
</UL>

<P><STRONG><a name="[d3]"></a>Mfs_Csio_Init</STRONG> (Thumb, 712 bytes, Stack size 32 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mfs_Csio_Init &rArr; Mfs_Csio_SetBaudRate &rArr; Mfs_GetReloadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetBaudRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[d4]"></a>Mfs_Csio_DeInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mfs_Csio_DeInit &rArr; Mfs_DeInitIrq &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_DeInitIrq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_DeInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[d5]"></a>Mfs_Csio_SetSckOutEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mfs_Csio_SetSckOutEnable &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[d6]"></a>Mfs_Csio_ReadData32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[d7]"></a>Mfs_Csio_WriteData32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[d8]"></a>Mfs_Csio_SetChipSelectErrEnable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[d9]"></a>Mfs_Csio_SetChipSelectErrIntEnable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[da]"></a>Mfs_Csio_GetStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[db]"></a>Mfs_Csio_ClrChipSelectErr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[dc]"></a>Mfs_Csio_ClrTimerIntReq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[dd]"></a>Mfs_Csio_SetSerialTimerIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[de]"></a>Mfs_Csio_SetSyncTransEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[df]"></a>Mfs_Csio_SetTimerPrescale</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e0]"></a>Mfs_Csio_SetSerialTimerEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e1]"></a>Mfs_Csio_GetSerialTimer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e2]"></a>Mfs_Csio_SetCmpVal4SerialTimer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e3]"></a>Mfs_Csio_SetCsHold</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e4]"></a>Mfs_Csio_SetCsTimingPrescale</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e5]"></a>Mfs_Csio_SetCsInActiveLevel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e6]"></a>Mfs_Csio_SetChipSelectEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e7]"></a>Mfs_Csio_SetChipSelectOutEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e8]"></a>Mfs_Csio_SetCsTimingConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[e9]"></a>Mfs_Csio_SetTxLength</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[ea]"></a>Mfs_I2c_GetReloadValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetBusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetBaudRate
</UL>

<P><STRONG><a name="[eb]"></a>Mfs_I2c_SetBaudRate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_GetReloadValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_Init
</UL>

<P><STRONG><a name="[ec]"></a>Mfs_I2c_Init</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetBaudRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[ed]"></a>Mfs_I2c_DeInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_DeInitIrq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[ee]"></a>Mfs_I2c_SetTxIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[ef]"></a>Mfs_I2c_SetRxIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f0]"></a>Mfs_I2c_SetAckEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f1]"></a>Mfs_I2c_SetWaitSelect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f2]"></a>Mfs_I2c_SetCondDetIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f3]"></a>Mfs_I2c_SetIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f4]"></a>Mfs_I2c_GetBusErrStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f5]"></a>Mfs_I2c_GetIntStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f6]"></a>Mfs_I2c_ClearIntStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f7]"></a>Mfs_I2c_SetTransmitEmpty</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f8]"></a>Mfs_I2c_SetDmaModeEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[f9]"></a>Mfs_I2c_SetNoizeFilter</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[fa]"></a>Mfs_I2c_SetSdaOutLevel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[fb]"></a>Mfs_I2c_SetSclOutLevel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[fc]"></a>Mfs_I2c_SetSerlalOutEnable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[fd]"></a>Mfs_I2c_SetBusErrorControlEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[fe]"></a>Mfs_I2c_SetI2cEnable</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[ff]"></a>Mfs_I2c_SetSlvAddrEnable</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[100]"></a>Mfs_Lin_SetBaudRate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_Init
</UL>

<P><STRONG><a name="[101]"></a>Mfs_Lin_Init</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_SetBaudRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[102]"></a>Mfs_Lin_DeInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_DeInit
</UL>

<P><STRONG><a name="[103]"></a>Mfs_Lin_SetBreak</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[104]"></a>Mfs_Lin_ClearBreakDetFlag</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[105]"></a>Mfs_Lin_SetBreakDetIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[106]"></a>Mfs_Lin_SetBreakConfig</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[107]"></a>Mfs_SetSerialOutputEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[108]"></a>Mfs_SetWakeUpControlEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[109]"></a>Mfs_SoftwareReset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[10a]"></a>Mfs_SetRxIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_RxIntrDisable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_RxIntrEnable
</UL>

<P><STRONG><a name="[10b]"></a>Mfs_SetTxIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_TxIntrDisable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_TxIntrEnable
</UL>

<P><STRONG><a name="[10c]"></a>Mfs_SetTxBusIdleIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[10d]"></a>Mfs_SetTxFifoIntEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[10e]"></a>Mfs_SetRxEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mfs_SetRxEnable &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_RxDisable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_RxEnable
</UL>

<P><STRONG><a name="[10f]"></a>Mfs_SetTxEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mfs_SetTxEnable &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_TxDisable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_TxEnable
</UL>

<P><STRONG><a name="[110]"></a>Mfs_GetStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncRecv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSendRecv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSend
</UL>

<P><STRONG><a name="[111]"></a>Mfs_ErrorClear</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mfs_ErrorClear &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[112]"></a>Mfs_ReadData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Read
</UL>

<P><STRONG><a name="[113]"></a>Mfs_WriteData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Write
</UL>

<P><STRONG><a name="[114]"></a>Mfs_ConfigFifo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[115]"></a>Mfs_GetTxFifoReqStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[116]"></a>Mfs_ClrTxFifoReqStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[117]"></a>Mfs_ResetFifo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[118]"></a>Mfs_SetFifoEnable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[119]"></a>Mfs_GetFifoBytes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[11a]"></a>Mfs_SetSMR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[11b]"></a>Mfs_GetSMR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[11c]"></a>Mfs_SetSCR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[11d]"></a>Mfs_GetSCR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[11e]"></a>Mfs_SetESCR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[11f]"></a>Mfs_GetESCR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[120]"></a>Mfs_SetBGR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[121]"></a>Mfs_GetBGR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[122]"></a>Mfs_SetFCR1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[123]"></a>Mfs_GetFCR1</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[124]"></a>Mfs_SetFCR0</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[125]"></a>Mfs_GetFCR0</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[126]"></a>Mfs_SetSCSTR10</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[127]"></a>Mfs_GetSCSTR10</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[128]"></a>Mfs_SetSCSTR32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[129]"></a>Mfs_GetSCSTR32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[12a]"></a>Mfs_SetSACSR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[12b]"></a>Mfs_GetSACSR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[12c]"></a>Mfs_GetSTMCR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[12d]"></a>Mfs_SetSCSCR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[12e]"></a>Mfs_GetSCSCR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[12f]"></a>Mfs_SetTBYTE0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[130]"></a>Mfs_GetTBYTE0</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[131]"></a>Mfs_SetISBA</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[132]"></a>Mfs_GetISBA</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[133]"></a>Mfs_SetISMK</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[134]"></a>Mfs_GetISMK</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[135]"></a>Mfs_GetNFCR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[136]"></a>Mfs_SetEIBCR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[137]"></a>Mfs_GetEIBCR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[138]"></a>Mfs_SetTxIntCallBack</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mfs_SetTxIntCallBack &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[139]"></a>Mfs_SetRxIntCallBack</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mfs_SetRxIntCallBack &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[13a]"></a>Mfs_SetStsIntCallBack</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[13b]"></a>Mfs_SetUpperLayerHandle</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsGetInternDataPtr
</UL>

<P><STRONG><a name="[13c]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_IrqHandler
</UL>

<P><STRONG><a name="[13d]"></a>IRQ054_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_IrqHandler
</UL>

<P><STRONG><a name="[13e]"></a>IRQ057_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_IrqHandler
</UL>

<P><STRONG><a name="[58]"></a>MFS4_RX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MFS4_RX_IRQHandler &rArr; MfsIrqHandlerRx
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsIrqHandlerRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>MFS4_TX_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MFS4_TX_IRQHandler &rArr; MfsIrqHandlerStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsIrqHandlerStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MfsIrqHandlerTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf56x.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; WyzBeeSpi_Init &rArr; Mfs_Csio_Init &rArr; Mfs_Csio_SetBaudRate &rArr; Mfs_GetReloadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[144]"></a>WyzBeeSpi_RxEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WyzBeeSpi_RxEnable &rArr; Mfs_SetRxEnable &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[145]"></a>WyzBeeSpi_TxEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WyzBeeSpi_TxEnable &rArr; Mfs_SetTxEnable &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Init
</UL>

<P><STRONG><a name="[142]"></a>WyzBeeSpi_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, wyzbee_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WyzBeeSpi_Init &rArr; Mfs_Csio_Init &rArr; Mfs_Csio_SetBaudRate &rArr; Mfs_GetReloadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_TxEnable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_RxEnable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxIntCallBack
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxIntCallBack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ErrorClear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetSckOutEnable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitRxIrq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitTxIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>WyzBeeSpi_CsDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncRecv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSendRecv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSend
</UL>

<P><STRONG><a name="[146]"></a>WyzBeeSpi_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wyzbee_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncRecv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSendRecv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::spiwrite(unsigned char)
</UL>

<P><STRONG><a name="[148]"></a>WyzBeeSpi_CsEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncRecv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSendRecv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSend
</UL>

<P><STRONG><a name="[147]"></a>WyzBeeSpi_SyncSend</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_CsEnable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_CsDisable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetStatus
</UL>

<P><STRONG><a name="[14a]"></a>WyzBeeSpi_Read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncRecv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_SyncSendRecv
</UL>

<P><STRONG><a name="[14b]"></a>WyzBeeSpi_SyncSendRecv</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_CsEnable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_CsDisable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetStatus
</UL>

<P><STRONG><a name="[14c]"></a>WyzBeeSpi_SyncRecv</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_CsEnable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_CsDisable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetStatus
</UL>

<P><STRONG><a name="[14d]"></a>WyzBeeSpi_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_DeInit
</UL>

<P><STRONG><a name="[14e]"></a>WyzBeeSpi_TxIntrEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxIntEnable
</UL>

<P><STRONG><a name="[14f]"></a>WyzBeeSpi_TxIntrDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxIntEnable
</UL>

<P><STRONG><a name="[150]"></a>WyzBeeSpi_RxIntrEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxIntEnable
</UL>

<P><STRONG><a name="[151]"></a>WyzBeeSpi_RxIntrDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxIntEnable
</UL>

<P><STRONG><a name="[152]"></a>WyzBeeSpi_RxDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxEnable
</UL>

<P><STRONG><a name="[153]"></a>WyzBeeSpi_TxDisable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wyzbee_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxEnable
</UL>

<P><STRONG><a name="[16b]"></a>delayMicroseconds(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::spiwrite(unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>delay(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adafruit_ssd1351.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::begin()
</UL>

<P><STRONG><a name="[154]"></a>Adafruit_SSD1351::Adafruit_SSD1351__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_SSD1351::Adafruit_SSD1351__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::Adafruit_SSD1351()
</UL>

<P><STRONG><a name="[143]"></a>Adafruit_SSD1351::Adafruit_SSD1351()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_SSD1351::Adafruit_SSD1351() &rArr; Adafruit_SSD1351::Adafruit_SSD1351__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::Adafruit_SSD1351__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_tft
</UL>

<P><STRONG><a name="[191]"></a>Adafruit_SSD1351::Color565(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, adafruit_ssd1351.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>Adafruit_SSD1351::writeCommand(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Adafruit_SSD1351::writeCommand(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::spiwrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::begin()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::invert(unsigned char)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-20} to Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-24} to Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::goTo(int, int)
</UL>

<P><STRONG><a name="[158]"></a>Adafruit_SSD1351::writeData(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::spiwrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::begin()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-20} to Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-24} to Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::goTo(int, int)
</UL>

<P><STRONG><a name="[159]"></a>Adafruit_SSD1351::goTo(int, int)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_SSD1351::goTo(int, int) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawPixel(short, short, unsigned short)
</UL>

<P><STRONG><a name="[9c]"></a>Adafruit_SSD1351::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adafruit_SSD1351::drawPixel(short, short, unsigned short) &rArr; Adafruit_SSD1351::goTo(int, int) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::spiwrite(unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::goTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-12} to Adafruit_SSD1351::drawPixel(short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[a0]"></a>thunk{v:0,-12} to Adafruit_SSD1351::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = thunk{v:0,-12} to Adafruit_SSD1351::drawPixel(short, short, unsigned short) &rArr; Adafruit_SSD1351::drawPixel(short, short, unsigned short) &rArr; Adafruit_SSD1351::goTo(int, int) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawPixel(short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[15a]"></a>Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::fillScreen(unsigned short)
</UL>

<P><STRONG><a name="[9d]"></a>Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[a2]"></a>thunk{v:0,-24} to Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thunk{v:0,-24} to Adafruit_SSD1351::drawFastHLine(short, short, short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[9e]"></a>Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[a1]"></a>thunk{v:0,-20} to Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thunk{v:0,-20} to Adafruit_SSD1351::drawFastVLine(short, short, short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[9f]"></a>Adafruit_SSD1351::fillScreen(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Adafruit_SSD1351::fillScreen(unsigned short) &rArr; Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-36} to Adafruit_SSD1351::fillScreen(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[a3]"></a>thunk{v:0,-36} to Adafruit_SSD1351::fillScreen(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = thunk{v:0,-36} to Adafruit_SSD1351::fillScreen(unsigned short) &rArr; Adafruit_SSD1351::fillScreen(unsigned short) &rArr; Adafruit_SSD1351::fillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Adafruit_SSD1351::writeData(unsigned char) &rArr; Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::fillScreen(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
</UL>
<P><STRONG><a name="[15b]"></a>Adafruit_SSD1351::invert(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>

<P><STRONG><a name="[15c]"></a>Adafruit_SSD1351::begin()</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, adafruit_ssd1351.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
</UL>

<P><STRONG><a name="[155]"></a>Adafruit_GFX::Adafruit_GFX__sub_object(short, short)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, adafruit_gfx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::Adafruit_SSD1351__sub_object()
</UL>

<P><STRONG><a name="[94]"></a>Adafruit_GFX::drawLine(short, short, short, short, unsigned short)</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[95]"></a>Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[96]"></a>Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[97]"></a>Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[98]"></a>Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[99]"></a>Adafruit_GFX::fillScreen(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_GFX::fillScreen(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[9a]"></a>Adafruit_GFX::invertDisplay(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[192]"></a>Adafruit_GFX::drawCircle(short, short, short, unsigned short)</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, adafruit_gfx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[15f]"></a>Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, adafruit_gfx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircle(short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[15e]"></a>Adafruit_GFX::fillCircle(short, short, short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, adafruit_gfx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>

<P><STRONG><a name="[193]"></a>Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>Adafruit_GFX::fillTriangle(short, short, short, short, short, short, unsigned short)</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short)</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, adafruit_gfx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[162]"></a>Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, adafruit_gfx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>

<P><STRONG><a name="[195]"></a>Adafruit_GFX::drawBitmap(short, short, const unsigned char*, short, short, unsigned short)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::write(unsigned char)
</UL>

<P><STRONG><a name="[196]"></a>Adafruit_GFX::setCursor(short, short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>Adafruit_GFX::setTextColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>Adafruit_GFX::setTextColor(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>Adafruit_GFX::setTextSize(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>Adafruit_GFX::setTextWrap(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>Adafruit_GFX::setRotation(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>Adafruit_GFX::write(unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, adafruit_gfx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_GFX::write(unsigned char) &rArr; Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_ssd1351.o(.constdata__ZTV16Adafruit_SSD1351)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[19c]"></a>Adafruit_GFX::height()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>Adafruit_GFX::width()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>Adafruit_GFX::getRotation()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[164]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[166]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[165]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[ba]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b1]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b6]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[167]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[16a]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1a0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>Adafruit_SSD1351::spiwrite(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adafruit_ssd1351.o(i._ZN16Adafruit_SSD13518spiwriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_SSD1351::spiwrite(unsigned char) &rArr; WyzBeeSpi_Write &rArr; Mfs_WriteData &rArr; MfsGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WyzBeeSpi_Write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::drawPixel(short, short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeData(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::writeCommand(unsigned char)
</UL>

<P><STRONG><a name="[1a4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[ae]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1a5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1a6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bf]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Nmi_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Nmi_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Init
</UL>

<P><STRONG><a name="[bc]"></a>ExintGetInternDataIdx</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, exint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_IrqHandler
</UL>

<P><STRONG><a name="[c0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, exint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Nmi_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Init
</UL>

<P><STRONG><a name="[c2]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Nmi_DeInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_DeInit
</UL>

<P><STRONG><a name="[be]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Nmi_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Nmi_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exint_Init
</UL>

<P><STRONG><a name="[c8]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_DeInitIrq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitRxIrq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitTxIrq
</UL>

<P><STRONG><a name="[cf]"></a>MfsGetInternDataPtr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MfsGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetUpperLayerHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetStsIntCallBack
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxIntCallBack
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxIntCallBack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetEIBCR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetEIBCR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetNFCR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetISMK
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetISMK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetISBA
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetISBA
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetTBYTE0
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTBYTE0
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSCSCR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSCSCR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSTMCR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSACSR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSACSR
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSCSTR32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSCSTR32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSCSTR10
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSCSTR10
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetFCR0
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetFCR0
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetFCR1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetFCR1
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetBGR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetBGR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetESCR
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetESCR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSCR
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSCR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetSMR
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSMR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetFifoBytes
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetFifoEnable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ResetFifo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ClrTxFifoReqStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetTxFifoReqStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ConfigFifo
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_WriteData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ReadData
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_ErrorClear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_GetStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxFifoIntEnable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxBusIdleIntEnable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetTxIntEnable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetRxIntEnable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SoftwareReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetWakeUpControlEnable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_SetSerialOutputEnable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_SetBreakConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_SetBreakDetIntEnable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_ClearBreakDetFlag
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_SetBreak
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Lin_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetSlvAddrEnable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetI2cEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetBusErrorControlEnable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetSerlalOutEnable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetSclOutLevel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetSdaOutLevel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetNoizeFilter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetDmaModeEnable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetTransmitEmpty
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_ClearIntStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_GetIntStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_GetBusErrStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetIntEnable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetCondDetIntEnable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetWaitSelect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetAckEnable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetRxIntEnable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetTxIntEnable
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_DeInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_I2c_SetBaudRate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetTxLength
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetCsTimingConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetChipSelectOutEnable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetChipSelectEnable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetCsInActiveLevel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetCsTimingPrescale
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetCsHold
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetCmpVal4SerialTimer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_GetSerialTimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetSerialTimerEnable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetTimerPrescale
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetSyncTransEnable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetSerialTimerIntEnable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_ClrTimerIntReq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_ClrChipSelectErr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_GetStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetChipSelectErrIntEnable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetChipSelectErrEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_WriteData32
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_ReadData32
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetSckOutEnable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Csio_SetBaudRate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_DeInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_Uart_SetBaudRate
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitRxIrq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitTxIrq
</UL>

<P><STRONG><a name="[cb]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_DeInitIrq
</UL>

<P><STRONG><a name="[c6]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_DeInitIrq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitRxIrq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mfs_InitTxIrq
</UL>

<P><STRONG><a name="[a4]"></a>__sti___8_main_cpp_tft</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___8_main_cpp_tft &rArr; Adafruit_SSD1351::Adafruit_SSD1351() &rArr; Adafruit_SSD1351::Adafruit_SSD1351__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_SSD1351::Adafruit_SSD1351()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
